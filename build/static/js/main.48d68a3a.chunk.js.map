{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["counterControl","props","react_default","a","createElement","className","onClick","clicked","label","counterOutput","value","Counter","_this","this","CounterOutput_CounterOutput","ctr","CounterControl_CounterControl","onIncrementCounter","onDecrementCounter","onIncrementCounterWithValue","onDecrementCounterWithValue","onStoreResults","onStoredResults","map","strResult","key","id","onDeleteResults","Component","connect","state","counter","results","dispatch","type","val","resultsID","App","containers_Counter_Counter","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","newState","Object","assign","objectSpread","concat","Date","updatedArray","filter","result","store","createStore","compose","__REDUX_DEVTOOLS_EXTENSION__","trace","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48d68a3a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\n// connect is a fn that return a HOC used to connect data from react to redux\nimport { connect } from 'react-redux';\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\nclass Counter extends Component {\n\n    render() {\n        return (\n            <div>\n                {/* \n                in normal react you use to the components state\n                <CounterOutput value={this.state.counter} /> \n                now with redux we connect to the redux state ->\n                */}\n                <CounterOutput value={this.props.ctr} />\n\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\n                {/* difference  above is now a reference to the fn in mapDispatchTo props and does not need to have ()\n                while below ther is a 'standard react fn'\n                */}\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter} />\n                <CounterControl label=\"Add 10\" clicked={this.props.onIncrementCounterWithValue} />\n                <CounterControl label=\"Subtract 15\" clicked={this.props.onDecrementCounterWithValue} />\n                <hr />\n                <button onClick={this.props.onStoreResults}>Store Results</button>\n                <ul>\n                    {this.props.onStoredResults.map(strResult => (\n                        <li className=\"resultsListItem\" key={strResult.id} onClick={() => this.props.onDeleteResults(strResult.id)}>{strResult.value}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n// instructions to redux how its state should be mapped to props\n// props are not changed internally, state is. this is why we call it \n// map state to props -> not changing state --> create a new clone for every update of state\nconst mapStateToProps = state => {\n    return {\n        // define prop names\n        // our name : redux state name\n        ctr: state.counter,\n        onStoredResults: state.results\n    }\n}\n\n\n// which kind of actions do i want to dispatch in this container\nconst mapDispatchToProps = dispatch => {\n    return {\n        // hold prop name which are refs (like a pointer) to fns\n        // which will be exected and dispatch the actions\n\n        // fn ref: fn              // needs to be anon & the actual fn is executed in the reducer.js\n        onIncrementCounter: () => dispatch({ type: 'INCREMENT' }),\n        onDecrementCounter: () => dispatch({ type: 'DECREMENT' }),\n        onIncrementCounterWithValue: () => dispatch({ type: 'ADD', val: 10 }),\n        onDecrementCounterWithValue: () => dispatch({ type: 'SUBTRACT', val: 15 }),\n        onStoreResults: () => dispatch({ type: 'STORE_RESULT' }),\n        onDeleteResults: (id) => dispatch({ type: 'DELETE_RESULT', resultsID: id })\n    }\n}\n\n// connect\n// used like this:\n// --> What piece of state do i want to pass along, what actions do i want to dispatch and from which component\n// export default connect('configs')(Counter);\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\n//sidenote\n// connnect(null, mapDispatchToProps)\n// connnect(mapStateToProps)","import React, { Component } from 'react';\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    counter: 0,\n    results: []\n}\n\nconst reducer = (state = initialState, action) => {\n    const { type } = action;\n    switch (type) {\n        case 'INCREMENT':\n            // clone the current state into a new obj\n            const newState = Object.assign({}, state);\n            newState.counter = state.counter + 1;\n            return newState\n        case 'DECREMENT':\n        return {\n            ...state,\n            counter: state.counter - 1\n        }\n        case 'ADD':\n        return {\n            ...state, \n            counter: state.counter + action.val\n        }\n        case 'SUBTRACT':\n        return {\n            ...state, \n            // use the data from the dispatch action.x \n            counter: state.counter - action.val\n        }\n        case 'STORE_RESULT':\n        return{\n            ...state,\n            // <li key=id>                 current state value\n            results: state.results.concat({id: new Date(), value: state.counter})\n        }\n        case 'DELETE_RESULT':\n\n        // thought behind it:\n        // const id = 2;\n        // const newArray = [...state.results];\n        // newArray.splice(id, 1);\n\n        // filter out the selected value using filter and the clicked elements id\n        const updatedArray = state.results.filter(result => result.id !== action.resultsID);\n        return{\n            ...state,\n            results: updatedArray\n        }\n\n        default:\n            break;\n    }\n    // if we dispatch an action that has no case we need to return the current state\n    // otherwise we will break the app\n    return state;\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, compose } from 'redux'\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\n// connect tp devtools and get code trace\nconst store = createStore(\n    reducer,\n    compose(\n        // applyMiddleware(''),\n        /* preloadedState, */\n        // code for chrome dev tool exension\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({trace: true})\n    )\n)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}